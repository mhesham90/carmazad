{"version":3,"sources":["assets/logo2.png","views/TopBar.js","styles/globalStyles.js","views/Home.js","views/Listing.js","views/Details.js","views/SellCar.js","App.js","styles/theme.js","serviceWorker.js","index.js"],"names":["module","exports","useTopBarStyles","makeStyles","TopBar","position","ToolbarButtons","marginLeft","CountryIcon","padding","children","fullWidth","classes","AppBar","className","Toolbar","style","Box","flexGrow","src","logo","alt","width","Typography","display","margin","IconButton","code","Button","color","startIcon","variant","borderRadius","useGlobalStyles","backgroundColor","borderColor","Home","Listing","Details","SellCar","App","ThemeProvider","theme","createMuiTheme","palette","primary","main","secondary","contrastText","success","error","warning","default","background","basename","process","path","element","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,mC,gSCOrCC,EAAkBC,YAAW,CACjCC,OAAQ,CACNC,SAAU,UAEZC,eAAgB,CACdC,WAAY,QAEdC,YAAa,CACXC,QAAS,KAuCEL,MAnCf,YAAiD,EAA/BM,SAA+B,EAArBC,UAAsB,IAC1CC,EAAUV,IAChB,OACE,kBAACW,EAAA,EAAD,CAAQC,UAAWF,EAAQR,QACzB,kBAACW,EAAA,EAAD,CAASC,MAAO,CAAEP,QAAS,KACzB,kBAACQ,EAAA,EAAD,CAAKC,SAAU,GACb,yBAAKC,IAAKC,IAAMC,IAAI,eAAeC,MAAO,OAE5C,kBAACL,EAAA,EAAD,KACE,kBAACM,EAAA,EAAD,CAAYP,MAAO,CAAEQ,QAAS,SAAUC,OAAQ,WAAhD,OACA,kBAACC,EAAA,EAAD,CAAYZ,UAAWF,EAAQJ,aAAa,kBAAC,IAAD,CAAMmB,KAAK,KAAKL,MAAM,QAClE,kBAACI,EAAA,EAAD,CAAYZ,UAAWF,EAAQJ,aAAa,kBAAC,IAAD,CAAMmB,KAAK,KAAKL,MAAM,QAClE,kBAACI,EAAA,EAAD,CAAYZ,UAAWF,EAAQJ,aAAa,kBAAC,IAAD,CAAMmB,KAAK,KAAKL,MAAM,QAClE,kBAACM,EAAA,EAAD,CAAQC,MAAM,UAAUb,MAAO,CAAES,OAAQ,WACvC,kBAACF,EAAA,EAAD,iBACA,kBAAC,IAAD,OAEF,kBAACN,EAAA,EAAD,KACE,kBAACW,EAAA,EAAD,CAAQC,MAAM,UAAUC,UAAW,kBAAC,IAAD,OAAnC,WACA,kBAACF,EAAA,EAAD,CAAQC,MAAM,UAAUE,QAAQ,YAAYjB,UAAU,gBAAgBE,MAAO,CAAES,OAAQ,SAAUO,aAAc,KAA/G,qB,QCpCL,IAAMC,EAAkB9B,YAAW,CACxC,UAAW,CACT,iBAAkB,CAChB,wBAAyB,CACvB0B,MAAO,OACPK,gBAAiB,YAGrB,iBAAkB,CAChB,wBAAyB,CACvBL,MAAO,OACPK,gBAAiB,WAEnB,uBAAwB,CACtBL,MAAO,UACPM,YAAa,eCTNC,MANf,WACE,OACE,8CCIWC,MANf,WACE,OACE,yCCIWC,MANf,WACE,OACE,yCCIWC,MANf,WACE,OACE,yCCwBWC,MAjBf,WAEE,OADAP,IAEE,kBAACQ,EAAA,EAAD,CAAeC,MCXVC,YAAe,CACpBC,QAAS,CACPC,QAAS,CAAEC,KAAM,WACjBC,UAAW,CAAED,KAAM,UAAWE,aAAc,QAC5CC,QAAS,CAAEH,KAAM,WACjBI,MAAO,CAAEJ,KAAM,WACfK,QAAS,CAAEL,KAAM,WACjBM,QAAS,CAAEN,KAAM,UAAWE,aAAc,WAC1CK,WAAY,CAAED,QAAS,eDIvB,kBAAC,IAAD,CAAQE,SAAUC,aAChB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,kBAAC,EAAD,QACzB,kBAAC,IAAD,CAAOD,KAAK,WAAWC,QAAS,kBAAC,EAAD,QAChC,kBAAC,IAAD,CAAOD,KAAK,WAAWC,QAAS,kBAAC,EAAD,QAChC,kBAAC,IAAD,CAAOD,KAAK,WAAWC,QAAS,kBAAC,EAAD,YETtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxB,GACLyB,QAAQzB,MAAMA,EAAM0B,c","file":"static/js/main.4f5a744c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo2.181f277a.png\";","import React from 'react';\nimport { makeStyles, AppBar, Toolbar, Box, Button, IconButton, Typography } from '@material-ui/core';\nimport Flag from 'react-world-flags'\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport PersonIcon from '@material-ui/icons/Person';\nimport logo from '../assets/logo2.png'; \n\nconst useTopBarStyles = makeStyles({\n  TopBar: {\n    position: 'static',\n  },\n  ToolbarButtons: {\n    marginLeft: 'auto',\n  },\n  CountryIcon: {\n    padding: 1,\n  },\n});\n\nfunction TopBar({ children, fullWidth = false }) {\n  const classes = useTopBarStyles();\n  return (\n    <AppBar className={classes.TopBar}>\n      <Toolbar style={{ padding: 10 }}>\n        <Box flexGrow={1}>\n          <img src={logo} alt=\"Auto Auction\" width={150}/>\n        </Box>\n        <Box>\n          <Typography style={{ display: 'inline', margin: '0 10px' }}>UAE</Typography>\n          <IconButton className={classes.CountryIcon}><Flag code='AE' width=\"25\" /></IconButton>\n          <IconButton className={classes.CountryIcon}><Flag code='SA' width=\"25\" /></IconButton>\n          <IconButton className={classes.CountryIcon}><Flag code='BH' width=\"25\" /></IconButton>\n          <Button color=\"inherit\" style={{ margin: '0 20px' }}>\n            <Typography >English </Typography>\n            <ArrowDropDownIcon />\n          </Button>\n          <Box>\n            <Button color=\"inherit\" startIcon={<PersonIcon />} >SIGN IN</Button>\n            <Button color=\"default\" variant=\"contained\" className='yellow-button' style={{ margin: '0 20px', borderRadius: 25 }}>REGISTER NOW</Button>\n          </Box>\n        </Box>\n      </Toolbar>\n      {/* <Toolbar>\n        <Box flexGrow={1}>\n        </Box>\n        <Box>\n          <Button color=\"inherit\" style={{ margin: '0 20px' }}>Login</Button>\n        </Box>\n      </Toolbar> */}\n    </AppBar>\n  );\n}\n\n\nexport default TopBar;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useGlobalStyles = makeStyles({\n  '@global': {\n    '.yellow-button': {\n      '&.MuiButton-contained': {\n        color: '#000',\n        backgroundColor: '#fdb81e',\n      },\n    },\n    '.danger-button': {\n      '&.MuiButton-contained': {\n        color: '#FFF',\n        backgroundColor: '#E11523',\n      },\n      '&.MuiButton-outlined': {\n        color: '#E11523',\n        borderColor: '#E11523',\n      },\n    },\n  },\n});\n","import React from 'react';\n\nfunction Home() {\n  return (\n    <div>welcome home</div>\n  )\n}\n\nexport default Home;","import React from 'react';\n\nfunction Listing() {\n  return (\n    <div>Listing</div>\n  )\n}\n\nexport default Listing;","import React from 'react';\n\nfunction Details() {\n  return (\n    <div>Details</div>\n  )\n}\n\nexport default Details;","import React from 'react';\n\nfunction SellCar() {\n  return (\n    <div>SellCar</div>\n  )\n}\n\nexport default SellCar;","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core';\nimport TopBar from \"./views/TopBar\";\nimport { getTheme } from './styles/theme';\nimport { useGlobalStyles } from './styles/globalStyles';\nimport Home from \"./views/Home\";\nimport Listing from \"./views/Listing\";\nimport Details from \"./views/Details\";\nimport SellCar from \"./views/SellCar\";\n\nfunction App() {\n  useGlobalStyles();\n  return (\n    <ThemeProvider theme={getTheme()}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <TopBar />\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/listing\" element={<Listing />} />\n          <Route path=\"/details\" element={<Details />} />\n          <Route path=\"/sellcar\" element={<SellCar />} />\n        </Routes>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { createMuiTheme } from '@material-ui/core';\n\nexport function getTheme() {\n  return createMuiTheme({\n    palette: {\n      primary: { main: '#02647A' },\n      secondary: { main: '#23A5B9', contrastText: '#FFF' },\n      success: { main: '#319E37' },\n      error: { main: '#E11523' },\n      warning: { main: '#F57C00' },\n      default: { main: '#E0E0E0', contrastText: '#02647A'  },\n      background: { default: '#EFF1F7' },\n    },\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}